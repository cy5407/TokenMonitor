/**
 * 測試改進的 AI 監控系統
 */

const fs = require('fs');
const path = require('path');
const { ImprovedAIMonitor } = require('../../scripts/improved_ai_monitor.js');

class ImprovedMonitorTest {
    constructor() {
        this.testDir = 'Tests/monitor_diagnosis/test_files';
        this.monitor = new ImprovedAIMonitor();
        this.testResults = [];
    }
    
    async runTests() {
        console.log('🧪 測試改進的 AI 監控系統...\n');
        
        // 準備測試環境
        await this.setupTestEnvironment();
        
        // 啟動監控
        this.monitor.start();
        
        // 等待監控系統初始化
        await this.sleep(2000);
        
        try {
            // 測試 1: AI 程式碼生成檢測
            await this.testAICodeGeneration();
            
            // 測試 2: AI 文件生成檢測
            await this.testAIDocumentGeneration();
            
            // 測試 3: AI 對話檢測
            await this.testAIChatDetection();
            
            // 測試 4: 非 AI 內容過濾
            await this.testNonAIContentFiltering();
            
            // 等待處理完成
            await this.sleep(3000);
            
            // 顯示測試結果
            this.displayTestResults();
            
        } finally {
            // 清理測試環境
            this.monitor.stop();
            await this.cleanupTestEnvironment();
        }
    }
    
    async setupTestEnvironment() {
        // 建立測試目錄
        if (!fs.existsSync(this.testDir)) {
            fs.mkdirSync(this.testDir, { recursive: true });
        }
        
        console.log('📁 測試環境已準備');
    }
    
    async testAICodeGeneration() {
        console.log('🧪 測試 1: AI 程式碼生成檢測');
        
        const testCode = `/**
 * 計算陣列總和的函數
 * Generated by AI Assistant
 */
function calculateSum(numbers) {
    if (!Array.isArray(numbers)) {
        throw new Error('Input must be an array');
    }
    
    return numbers.reduce((sum, num) => {
        if (typeof num !== 'number') {
            throw new Error('All elements must be numbers');
        }
        return sum + num;
    }, 0);
}

// 使用範例
const numbers = [1, 2, 3, 4, 5];
const result = calculateSum(numbers);
console.log('總和:', result);

module.exports = calculateSum;`;
        
        const testFile = path.join(this.testDir, 'ai_generated_code.js');
        fs.writeFileSync(testFile, testCode, 'utf8');
        
        await this.sleep(1000);
        
        this.recordTest('AI 程式碼生成檢測', '應該檢測到 AI 生成的程式碼');
    }
    
    async testAIDocumentGeneration() {
        console.log('🧪 測試 2: AI 文件生成檢測');
        
        const testDoc = `# API 使用指南

這份文件說明如何使用我們的 API。

## 快速開始

首先，你需要獲取 API 金鑰：

\`\`\`bash
curl -X POST https://api.example.com/auth \\
  -H "Content-Type: application/json" \\
  -d '{"username": "your_username", "password": "your_password"}'
\`\`\`

## 基本用法

### 獲取用戶資訊

\`\`\`javascript
const response = await fetch('https://api.example.com/users/me', {
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY'
  }
});

const userData = await response.json();
console.log(userData);
\`\`\`

### 創建新項目

\`\`\`javascript
const newItem = await fetch('https://api.example.com/items', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    name: 'My New Item',
    description: 'This is a test item'
  })
});
\`\`\`

## 錯誤處理

API 會返回標準的 HTTP 狀態碼：

- 200: 成功
- 400: 請求錯誤
- 401: 未授權
- 404: 資源不存在
- 500: 伺服器錯誤`;
        
        const testFile = path.join(this.testDir, 'ai_generated_docs.md');
        fs.writeFileSync(testFile, testDoc, 'utf8');
        
        await this.sleep(1000);
        
        this.recordTest('AI 文件生成檢測', '應該檢測到 AI 生成的文件');
    }
    
    async testAIChatDetection() {
        console.log('🧪 測試 3: AI 對話檢測');
        
        const testChat = `User: 請幫我寫一個 JavaScript 函數來驗證電子郵件格式Assis
tant: 好的，我來幫你寫一個電子郵件驗證函數：

\`\`\`javascript
function validateEmail(email) {
    // 基本的電子郵件正則表達式
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;
    
    // 檢查是否為空
    if (!email || typeof email !== 'string') {
        return false;
    }
    
    // 檢查長度
    if (email.length > 254) {
        return false;
    }
    
    // 使用正則表達式驗證
    return emailRegex.test(email.trim());
}

// 使用範例
console.log(validateEmail('test@example.com')); // true
console.log(validateEmail('invalid-email'));    // false
\`\`\`

這個函數會檢查基本的電子郵件格式，包括 @ 符號、域名等。

User: 謝謝！這個函數看起來很實用。`;
        
        const testFile = path.join(this.testDir, 'ai_chat_conversation.txt');
        fs.writeFileSync(testFile, testChat, 'utf8');
        
        await this.sleep(1000);
        
        this.recordTest('AI 對話檢測', '應該檢測到 AI 對話內容');
    }
    
    async testNonAIContentFiltering() {
        console.log('🧪 測試 4: 非 AI 內容過濾');
        
        const normalContent = `// 這是一個簡單的配置檔案
const config = {
    port: 3000,
    host: 'localhost'
};`;
        
        const testFile = path.join(this.testDir, 'normal_config.js');
        fs.writeFileSync(testFile, normalContent, 'utf8');
        
        await this.sleep(1000);
        
        this.recordTest('非 AI 內容過濾', '應該過濾掉非 AI 生成的簡單內容');
    }
    
    recordTest(testName, description) {
        this.testResults.push({
            name: testName,
            description: description,
            timestamp: new Date().toISOString()
        });
    }
    
    displayTestResults() {
        console.log('\n📊 測試結果摘要:');
        console.log('================');
        
        this.testResults.forEach((test, index) => {
            console.log(`${index + 1}. ${test.name}`);
            console.log(`   ${test.description}`);
            console.log(`   時間: ${new Date(test.timestamp).toLocaleTimeString('zh-TW')}`);
            console.log('');
        });
        
        console.log('💡 請檢查控制台輸出，確認是否有檢測到 AI 內容的訊息');
        console.log('📄 檢查日誌檔案 data/kiro-usage.log 是否有新的記錄');
    }
    
    async cleanupTestEnvironment() {
        try {
            // 刪除測試檔案
            if (fs.existsSync(this.testDir)) {
                const files = fs.readdirSync(this.testDir);
                for (const file of files) {
                    fs.unlinkSync(path.join(this.testDir, file));
                }
                fs.rmdirSync(this.testDir);
            }
            
            console.log('🧹 測試環境已清理');
        } catch (error) {
            console.error('❌ 清理測試環境失敗:', error.message);
        }
    }
    
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// 執行測試
if (require.main === module) {
    const test = new ImprovedMonitorTest();
    test.runTests().catch(error => {
        console.error('❌ 測試執行失敗:', error);
        process.exit(1);
    });
}

module.exports = { ImprovedMonitorTest };