/**
 * 手動測試 AI 內容檢測
 */

const fs = require('fs');
const path = require('path');

// 測試 AI 內容檢測邏輯
function testAIDetection() {
    console.log('🧪 手動測試 AI 內容檢測邏輯...\n');
    
    // AI 檢測模式
    const aiPatterns = [
        /function\s+\w+\s*\([^)]*\)\s*{[\s\S]*}/,
        /class\s+\w+\s*{[\s\S]*}/,
        /const\s+\w+\s*=\s*\([^)]*\)\s*=>/,
        /```[\s\S]*?```/,
        /\/\*\*[\s\S]*?\*\//,
        /\/\/\s*(Generated|Created|AI|Assistant)/i,
        /#{1,6}\s+.+/,
        /^\s*-\s+.+/m,
        /^(User|Assistant|AI):/m,
        /^Q:|^A:/m
    ];
    
    // 測試內容
    const testCases = [
        {
            name: 'AI 生成的函數',
            content: `/**
 * 計算陣列總和的函數
 * Generated by AI Assistant
 */
function calculateSum(numbers) {
    return numbers.reduce((sum, num) => sum + num, 0);
}`
        },
        {
            name: 'Markdown 文件',
            content: `# API 使用指南

這份文件說明如何使用我們的 API。

\`\`\`javascript
const response = await fetch('/api/users');
\`\`\`

## 基本用法

- 獲取用戶資訊
- 創建新項目`
        },
        {
            name: 'AI 對話',
            content: `User: 請幫我寫一個函數Assista
nt: 好的，我來幫你寫一個函數：

\`\`\`javascript
function example() {
    return "Hello World";
}
\`\`\`

這個函數會返回一個字符串。`
        },
        {
            name: '普通配置檔案',
            content: `const config = {
    port: 3000,
    host: 'localhost'
};`
        }
    ];
    
    function isAIGeneratedContent(content) {
        let score = 0;
        
        for (const pattern of aiPatterns) {
            if (pattern.test(content)) {
                score++;
                console.log(`  ✅ 符合模式: ${pattern}`);
            }
        }
        
        // 額外檢查
        if (content.length > 100 && content.includes('function')) {
            score++;
            console.log(`  ✅ 長內容包含 function`);
        }
        if (content.includes('```') && content.includes('javascript')) {
            score++;
            console.log(`  ✅ 包含 JavaScript 程式碼區塊`);
        }
        if (content.includes('# ') && content.length > 50) {
            score++;
            console.log(`  ✅ 包含 Markdown 標題`);
        }
        
        console.log(`  📊 總分: ${score}`);
        return score >= 2;
    }
    
    // 測試每個案例
    testCases.forEach((testCase, index) => {
        console.log(`\n${index + 1}. 測試: ${testCase.name}`);
        console.log(`內容長度: ${testCase.content.length} 字符`);
        
        const isAI = isAIGeneratedContent(testCase.content);
        console.log(`結果: ${isAI ? '✅ 檢測為 AI 內容' : '❌ 未檢測為 AI 內容'}`);
    });
    
    console.log('\n🎯 測試完成！');
}

// 測試實際的檔案監控
function testFileMonitoring() {
    console.log('\n🧪 測試實際檔案監控...\n');
    
    const testDir = 'Tests/monitor_diagnosis/test_files';
    
    // 建立測試目錄
    if (!fs.existsSync(testDir)) {
        fs.mkdirSync(testDir, { recursive: true });
    }
    
    // 建立測試檔案
    const testFile = path.join(testDir, 'ai_test_file.js');
    const aiContent = `/**
 * AI 生成的測試函數
 * Generated by AI Assistant
 */
function testAIFunction() {
    console.log("這是 AI 生成的函數");
    return "AI Generated Content";
}

// 使用範例
const result = testAIFunction();
console.log(result);`;
    
    console.log(`📝 建立測試檔案: ${testFile}`);
    fs.writeFileSync(testFile, aiContent, 'utf8');
    
    console.log('✅ 測試檔案已建立');
    console.log('💡 現在可以啟動改進的監控系統來測試檔案監控功能');
    
    // 清理函數
    setTimeout(() => {
        try {
            fs.unlinkSync(testFile);
            fs.rmdirSync(testDir);
            console.log('🧹 測試檔案已清理');
        } catch (error) {
            console.error('清理失敗:', error.message);
        }
    }, 10000); // 10秒後清理
}

// 執行測試
if (require.main === module) {
    testAIDetection();
    testFileMonitoring();
}

module.exports = { testAIDetection, testFileMonitoring };